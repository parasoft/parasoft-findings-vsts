{
    "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
    "version": "2.1.0",
    "runs": [
        {
            "tool": {
                "driver": {
                    "name": "C++test",
                    "semanticVersion": "2022.1.0.20220615B1827",
                    "rules": [
                        {
                            "id": "BD-API-NEGPARAM",
                            "name": "Do not pass negative values to functions expecting non-negative arguments",
                            "shortDescription": {
                                "text": "Do not pass negative values to functions expecting non-negative arguments"
                            },
                            "fullDescription": {
                                "text": "Do not pass negative values to functions expecting non-negative arguments [BD-API-NEGPARAM]"
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "help": {
                                "text": "Do not pass negative values to functions expecting non-negative arguments [BD-API-NEGPARAM]"
                            },
                            "properties": {
                                "tags": [
                                    "Flow Analysis",
                                    "Incorrect API usage"
                                ]
                            }
                        },
                        {
                            "id": "BD-PB-EXCEPT",
                            "name": "Always catch exceptions",
                            "shortDescription": {
                                "text": "Always catch exceptions"
                            },
                            "fullDescription": {
                                "text": "Always catch exceptions [BD-PB-EXCEPT]"
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "help": {
                                "text": "Always catch exceptions [BD-PB-EXCEPT]"
                            },
                            "properties": {
                                "tags": [
                                    "Flow Analysis",
                                    "Possible Bugs"
                                ]
                            }
                        },
                        {
                            "id": "BD-PB-NOTINIT",
                            "name": "Avoid use before initialization",
                            "shortDescription": {
                                "text": "Avoid use before initialization"
                            },
                            "fullDescription": {
                                "text": "Avoid use before initialization [BD-PB-NOTINIT]"
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "help": {
                                "text": "Avoid use before initialization [BD-PB-NOTINIT]"
                            },
                            "properties": {
                                "tags": [
                                    "Flow Analysis",
                                    "Possible Bugs"
                                ]
                            }
                        },
                        {
                            "id": "BD-PB-NP",
                            "name": "Avoid null pointer dereferencing",
                            "shortDescription": {
                                "text": "Avoid null pointer dereferencing"
                            },
                            "fullDescription": {
                                "text": "Avoid null pointer dereferencing [BD-PB-NP]"
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "help": {
                                "text": "Avoid null pointer dereferencing [BD-PB-NP]"
                            },
                            "properties": {
                                "tags": [
                                    "Flow Analysis",
                                    "Possible Bugs"
                                ]
                            }
                        },
                        {
                            "id": "BD-PB-OVERFFMT",
                            "name": "Avoid buffer overflow due to defining incorrect format limits",
                            "shortDescription": {
                                "text": "Avoid buffer overflow due to defining incorrect format limits"
                            },
                            "fullDescription": {
                                "text": "Avoid buffer overflow due to defining incorrect format limits [BD-PB-OVERFFMT]"
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "help": {
                                "text": "Avoid buffer overflow due to defining incorrect format limits [BD-PB-OVERFFMT]"
                            },
                            "properties": {
                                "tags": [
                                    "Flow Analysis",
                                    "Possible Bugs"
                                ]
                            }
                        },
                        {
                            "id": "BD-PB-OVERFNZT",
                            "name": "Avoid overflow due to reading a not zero terminated string",
                            "shortDescription": {
                                "text": "Avoid overflow due to reading a not zero terminated string"
                            },
                            "fullDescription": {
                                "text": "Avoid overflow due to reading a not zero terminated string [BD-PB-OVERFNZT]"
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "help": {
                                "text": "Avoid overflow due to reading a not zero terminated string [BD-PB-OVERFNZT]"
                            },
                            "properties": {
                                "tags": [
                                    "Flow Analysis",
                                    "Possible Bugs"
                                ]
                            }
                        },
                        {
                            "id": "BD-PB-OVERFRD",
                            "name": "Avoid overflow when reading from a buffer",
                            "shortDescription": {
                                "text": "Avoid overflow when reading from a buffer"
                            },
                            "fullDescription": {
                                "text": "Avoid overflow when reading from a buffer [BD-PB-OVERFRD]"
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "help": {
                                "text": "Avoid overflow when reading from a buffer [BD-PB-OVERFRD]"
                            },
                            "properties": {
                                "tags": [
                                    "Flow Analysis",
                                    "Possible Bugs"
                                ]
                            }
                        },
                        {
                            "id": "BD-PB-OVERFWR",
                            "name": "Avoid overflow when writing to a buffer",
                            "shortDescription": {
                                "text": "Avoid overflow when writing to a buffer"
                            },
                            "fullDescription": {
                                "text": "Avoid overflow when writing to a buffer [BD-PB-OVERFWR]"
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "help": {
                                "text": "Avoid overflow when writing to a buffer [BD-PB-OVERFWR]"
                            },
                            "properties": {
                                "tags": [
                                    "Flow Analysis",
                                    "Possible Bugs"
                                ]
                            }
                        },
                        {
                            "id": "BD-PB-ZERO",
                            "name": "Avoid division by zero",
                            "shortDescription": {
                                "text": "Avoid division by zero"
                            },
                            "fullDescription": {
                                "text": "Avoid division by zero [BD-PB-ZERO]"
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "help": {
                                "text": "Avoid division by zero [BD-PB-ZERO]"
                            },
                            "properties": {
                                "tags": [
                                    "Flow Analysis",
                                    "Possible Bugs"
                                ]
                            }
                        },
                        {
                            "id": "BD-PB-ARRAY",
                            "name": "Avoid accessing arrays out of bounds",
                            "shortDescription": {
                                "text": "Avoid accessing arrays out of bounds"
                            },
                            "fullDescription": {
                                "text": "Avoid accessing arrays out of bounds [BD-PB-ARRAY]"
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "help": {
                                "text": "Avoid accessing arrays out of bounds [BD-PB-ARRAY]"
                            },
                            "properties": {
                                "tags": [
                                    "Flow Analysis",
                                    "Possible Bugs"
                                ]
                            }
                        },
                        {
                            "id": "BD-PB-CC",
                            "name": "Avoid conditions that always evaluate to the same value",
                            "shortDescription": {
                                "text": "Avoid conditions that always evaluate to the same value"
                            },
                            "fullDescription": {
                                "text": "Avoid conditions that always evaluate to the same value [BD-PB-CC]"
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "help": {
                                "text": "Avoid conditions that always evaluate to the same value [BD-PB-CC]"
                            },
                            "properties": {
                                "tags": [
                                    "Flow Analysis",
                                    "Possible Bugs"
                                ]
                            }
                        },
                        {
                            "id": "BD-PB-DEREF",
                            "name": "Do not check for null after dereferencing",
                            "shortDescription": {
                                "text": "Do not check for null after dereferencing"
                            },
                            "fullDescription": {
                                "text": "Do not check for null after dereferencing [BD-PB-DEREF]"
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "help": {
                                "text": "Do not check for null after dereferencing [BD-PB-DEREF]"
                            },
                            "properties": {
                                "tags": [
                                    "Flow Analysis",
                                    "Possible Bugs"
                                ]
                            }
                        },
                        {
                            "id": "BD-PB-STREAMFLAGS",
                            "name": "Suspicious setting of stream flags",
                            "shortDescription": {
                                "text": "Suspicious setting of stream flags"
                            },
                            "fullDescription": {
                                "text": "Suspicious setting of stream flags [BD-PB-STREAMFLAGS]"
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "help": {
                                "text": "Suspicious setting of stream flags [BD-PB-STREAMFLAGS]"
                            },
                            "properties": {
                                "tags": [
                                    "Flow Analysis",
                                    "Possible Bugs"
                                ]
                            }
                        },
                        {
                            "id": "BD-PB-STREAMFMT",
                            "name": "Restore stream format",
                            "shortDescription": {
                                "text": "Restore stream format"
                            },
                            "fullDescription": {
                                "text": "Restore stream format [BD-PB-STREAMFMT]"
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "help": {
                                "text": "Restore stream format [BD-PB-STREAMFMT]"
                            },
                            "properties": {
                                "tags": [
                                    "Flow Analysis",
                                    "Possible Bugs"
                                ]
                            }
                        },
                        {
                            "id": "BD-RES-BADDEALLOC",
                            "name": "Properly deallocate dynamically allocated resources",
                            "shortDescription": {
                                "text": "Properly deallocate dynamically allocated resources"
                            },
                            "fullDescription": {
                                "text": "Properly deallocate dynamically allocated resources [BD-RES-BADDEALLOC]"
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "help": {
                                "text": "Properly deallocate dynamically allocated resources [BD-RES-BADDEALLOC]"
                            },
                            "properties": {
                                "tags": [
                                    "Flow Analysis",
                                    "Resources"
                                ]
                            }
                        },
                        {
                            "id": "BD-RES-FREE",
                            "name": "Do not use resources that have been freed",
                            "shortDescription": {
                                "text": "Do not use resources that have been freed"
                            },
                            "fullDescription": {
                                "text": "Do not use resources that have been freed [BD-RES-FREE]"
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "help": {
                                "text": "Do not use resources that have been freed [BD-RES-FREE]"
                            },
                            "properties": {
                                "tags": [
                                    "Flow Analysis",
                                    "Resources"
                                ]
                            }
                        },
                        {
                            "id": "BD-RES-INVFREE",
                            "name": "Do not free resources using invalid pointers",
                            "shortDescription": {
                                "text": "Do not free resources using invalid pointers"
                            },
                            "fullDescription": {
                                "text": "Do not free resources using invalid pointers [BD-RES-INVFREE]"
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "help": {
                                "text": "Do not free resources using invalid pointers [BD-RES-INVFREE]"
                            },
                            "properties": {
                                "tags": [
                                    "Flow Analysis",
                                    "Resources"
                                ]
                            }
                        },
                        {
                            "id": "BD-RES-LEAKS",
                            "name": "Ensure resources are freed",
                            "shortDescription": {
                                "text": "Ensure resources are freed"
                            },
                            "fullDescription": {
                                "text": "Ensure resources are freed [BD-RES-LEAKS]"
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "help": {
                                "text": "Ensure resources are freed [BD-RES-LEAKS]"
                            },
                            "properties": {
                                "tags": [
                                    "Flow Analysis",
                                    "Resources"
                                ]
                            }
                        },
                        {
                            "id": "BD-TRS-DLOCK",
                            "name": "Avoid double locking",
                            "shortDescription": {
                                "text": "Avoid double locking"
                            },
                            "fullDescription": {
                                "text": "Avoid double locking [BD-TRS-DLOCK]"
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "help": {
                                "text": "Avoid double locking [BD-TRS-DLOCK]"
                            },
                            "properties": {
                                "tags": [
                                    "Flow Analysis",
                                    "Threads & Synchronization"
                                ]
                            }
                        },
                        {
                            "id": "BD-TRS-FORKFILE",
                            "name": "Avoid race conditions when using fork and file descriptors",
                            "shortDescription": {
                                "text": "Avoid race conditions when using fork and file descriptors"
                            },
                            "fullDescription": {
                                "text": "Avoid race conditions when using fork and file descriptors [BD-TRS-FORKFILE]"
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "help": {
                                "text": "Avoid race conditions when using fork and file descriptors [BD-TRS-FORKFILE]"
                            },
                            "properties": {
                                "tags": [
                                    "Flow Analysis",
                                    "Threads & Synchronization"
                                ]
                            }
                        },
                        {
                            "id": "BD-TRS-LOCK",
                            "name": "Do not abandon unreleased locks",
                            "shortDescription": {
                                "text": "Do not abandon unreleased locks"
                            },
                            "fullDescription": {
                                "text": "Do not abandon unreleased locks [BD-TRS-LOCK]"
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "help": {
                                "text": "Do not abandon unreleased locks [BD-TRS-LOCK]"
                            },
                            "properties": {
                                "tags": [
                                    "Flow Analysis",
                                    "Threads & Synchronization"
                                ]
                            }
                        },
                        {
                            "id": "BD-TRS-ORDER",
                            "name": "Do not acquire locks in different order",
                            "shortDescription": {
                                "text": "Do not acquire locks in different order"
                            },
                            "fullDescription": {
                                "text": "Do not acquire locks in different order [BD-TRS-ORDER]"
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "help": {
                                "text": "Do not acquire locks in different order [BD-TRS-ORDER]"
                            },
                            "properties": {
                                "tags": [
                                    "Flow Analysis",
                                    "Threads & Synchronization"
                                ]
                            }
                        },
                        {
                            "id": "BD-TRS-SYMLINK",
                            "name": "Avoid race conditions while checking for the existence of a symbolic link",
                            "shortDescription": {
                                "text": "Avoid race conditions while checking for the existence of a symbolic link"
                            },
                            "fullDescription": {
                                "text": "Avoid race conditions while checking for the existence of a symbolic link [BD-TRS-SYMLINK]"
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "help": {
                                "text": "Avoid race conditions while checking for the existence of a symbolic link [BD-TRS-SYMLINK]"
                            },
                            "properties": {
                                "tags": [
                                    "Flow Analysis",
                                    "Threads & Synchronization"
                                ]
                            }
                        },
                        {
                            "id": "BD-TRS-TSHL",
                            "name": "Do not use blocking functions while holding a lock",
                            "shortDescription": {
                                "text": "Do not use blocking functions while holding a lock"
                            },
                            "fullDescription": {
                                "text": "Do not use blocking functions while holding a lock [BD-TRS-TSHL]"
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "help": {
                                "text": "Do not use blocking functions while holding a lock [BD-TRS-TSHL]"
                            },
                            "properties": {
                                "tags": [
                                    "Flow Analysis",
                                    "Threads & Synchronization"
                                ]
                            }
                        },
                        {
                            "id": "CDD-DUPM",
                            "name": "Avoid function duplication",
                            "shortDescription": {
                                "text": "Avoid function duplication"
                            },
                            "fullDescription": {
                                "text": "Avoid function duplication [CDD-DUPM]"
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "help": {
                                "text": "Avoid function duplication [CDD-DUPM]"
                            },
                            "properties": {
                                "tags": [
                                    "Code Duplication Detection"
                                ]
                            }
                        },
                        {
                            "id": "CODSTA-44",
                            "name": "Local variables should not use the same names as member variables",
                            "shortDescription": {
                                "text": "Local variables should not use the same names as member variables"
                            },
                            "fullDescription": {
                                "text": "Local variables should not use the same names as member variables [CODSTA-44]"
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "help": {
                                "text": "Local variables should not use the same names as member variables [CODSTA-44]"
                            },
                            "properties": {
                                "tags": [
                                    "Coding Conventions"
                                ]
                            }
                        },
                        {
                            "id": "CODSTA-147",
                            "name": "Pointer should not be compared with NULL using relational operators <, >, >=, <=",
                            "shortDescription": {
                                "text": "Pointer should not be compared with NULL using relational operators <, >, >=, <="
                            },
                            "fullDescription": {
                                "text": "Pointer should not be compared with NULL using relational operators <, >, >=, <= [CODSTA-147]"
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "help": {
                                "text": "Pointer should not be compared with NULL using relational operators <, >, >=, <= [CODSTA-147]"
                            },
                            "properties": {
                                "tags": [
                                    "Coding Conventions"
                                ]
                            }
                        },
                        {
                            "id": "CODSTA-148",
                            "name": "Do not use string literals as operands of equality or relational operators",
                            "shortDescription": {
                                "text": "Do not use string literals as operands of equality or relational operators"
                            },
                            "fullDescription": {
                                "text": "Do not use string literals as operands of equality or relational operators [CODSTA-148]"
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "help": {
                                "text": "Do not use string literals as operands of equality or relational operators [CODSTA-148]"
                            },
                            "properties": {
                                "tags": [
                                    "Coding Conventions"
                                ]
                            }
                        },
                        {
                            "id": "CODSTA-82",
                            "name": "Avoid infinite loops",
                            "shortDescription": {
                                "text": "Avoid infinite loops"
                            },
                            "fullDescription": {
                                "text": "Avoid infinite loops [CODSTA-82]"
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "help": {
                                "text": "Avoid infinite loops [CODSTA-82]"
                            },
                            "properties": {
                                "tags": [
                                    "Coding Conventions"
                                ]
                            }
                        },
                        {
                            "id": "CODSTA-CPP-04",
                            "name": "Constructors allowing for conversion should be made explicit",
                            "shortDescription": {
                                "text": "Constructors allowing for conversion should be made explicit"
                            },
                            "fullDescription": {
                                "text": "Constructors allowing for conversion should be made explicit [CODSTA-CPP-04]"
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "help": {
                                "text": "Constructors allowing for conversion should be made explicit [CODSTA-CPP-04]"
                            },
                            "properties": {
                                "tags": [
                                    "Coding Conventions",
                                    "Coding Conventions for C++"
                                ]
                            }
                        },
                        {
                            "id": "EXCEPT-02",
                            "name": "Throw by value, catch by reference",
                            "shortDescription": {
                                "text": "Throw by value, catch by reference"
                            },
                            "fullDescription": {
                                "text": "Throw by value, catch by reference [EXCEPT-02]"
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "help": {
                                "text": "Throw by value, catch by reference [EXCEPT-02]"
                            },
                            "properties": {
                                "tags": [
                                    "Exceptions"
                                ]
                            }
                        },
                        {
                            "id": "EXCEPT-03",
                            "name": "Do not throw from within destructor",
                            "shortDescription": {
                                "text": "Do not throw from within destructor"
                            },
                            "fullDescription": {
                                "text": "Do not throw from within destructor [EXCEPT-03]"
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "help": {
                                "text": "Do not throw from within destructor [EXCEPT-03]"
                            },
                            "properties": {
                                "tags": [
                                    "Exceptions"
                                ]
                            }
                        },
                        {
                            "id": "INIT-06",
                            "name": "All member variables should be initialized in constructor",
                            "shortDescription": {
                                "text": "All member variables should be initialized in constructor"
                            },
                            "fullDescription": {
                                "text": "All member variables should be initialized in constructor [INIT-06]"
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "help": {
                                "text": "All member variables should be initialized in constructor [INIT-06]"
                            },
                            "properties": {
                                "tags": [
                                    "Initialization"
                                ]
                            }
                        },
                        {
                            "id": "METRIC.CC",
                            "name": "McCabe Cyclomatic Complexity",
                            "shortDescription": {
                                "text": "McCabe Cyclomatic Complexity"
                            },
                            "fullDescription": {
                                "text": "McCabe Cyclomatic Complexity [METRIC.CC]"
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "help": {
                                "text": "McCabe Cyclomatic Complexity [METRIC.CC]"
                            },
                            "properties": {
                                "tags": [
                                    "Metric"
                                ]
                            }
                        },
                        {
                            "id": "METRIC.NBD",
                            "name": "Nested Blocks Depth",
                            "shortDescription": {
                                "text": "Nested Blocks Depth"
                            },
                            "fullDescription": {
                                "text": "Nested Blocks Depth [METRIC.NBD]"
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "help": {
                                "text": "Nested Blocks Depth [METRIC.NBD]"
                            },
                            "properties": {
                                "tags": [
                                    "Metric"
                                ]
                            }
                        },
                        {
                            "id": "MISRA2004-13_3",
                            "name": "Floating-point expressions shall not be tested for equality or inequality",
                            "shortDescription": {
                                "text": "Floating-point expressions shall not be tested for equality or inequality"
                            },
                            "fullDescription": {
                                "text": "Floating-point expressions shall not be tested for equality or inequality [MISRA2004-13_3]"
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "help": {
                                "text": "Floating-point expressions shall not be tested for equality or inequality [MISRA2004-13_3]"
                            },
                            "properties": {
                                "tags": [
                                    "MISRA C 2004"
                                ]
                            }
                        },
                        {
                            "id": "MISRA2004-16_8",
                            "name": "All exit paths from a function with non-void return type shall have an explicit return statement with an expression",
                            "shortDescription": {
                                "text": "All exit paths from a function with non-void return type shall have an explicit return statement with an expression"
                            },
                            "fullDescription": {
                                "text": "All exit paths from a function with non-void return type shall have an explicit return statement with an expression [MISRA2004-16_8]"
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "help": {
                                "text": "All exit paths from a function with non-void return type shall have an explicit return statement with an expression [MISRA2004-16_8]"
                            },
                            "properties": {
                                "tags": [
                                    "MISRA C 2004"
                                ]
                            }
                        },
                        {
                            "id": "MISRA2004-17_6_a",
                            "name": "The address of an object with automatic storage shall not be returned from a function",
                            "shortDescription": {
                                "text": "The address of an object with automatic storage shall not be returned from a function"
                            },
                            "fullDescription": {
                                "text": "The address of an object with automatic storage shall not be returned from a function [MISRA2004-17_6_a]"
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "help": {
                                "text": "The address of an object with automatic storage shall not be returned from a function [MISRA2004-17_6_a]"
                            },
                            "properties": {
                                "tags": [
                                    "MISRA C 2004"
                                ]
                            }
                        },
                        {
                            "id": "MRM-08",
                            "name": "Do not invoke malloc/realloc for objects having constructors",
                            "shortDescription": {
                                "text": "Do not invoke malloc/realloc for objects having constructors"
                            },
                            "fullDescription": {
                                "text": "Do not invoke malloc/realloc for objects having constructors [MRM-08]"
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "help": {
                                "text": "Do not invoke malloc/realloc for objects having constructors [MRM-08]"
                            },
                            "properties": {
                                "tags": [
                                    "Memory and Resource Management"
                                ]
                            }
                        },
                        {
                            "id": "MRM-37",
                            "name": "Declare a copy assignment operator for classes with dynamically allocated memory",
                            "shortDescription": {
                                "text": "Declare a copy assignment operator for classes with dynamically allocated memory"
                            },
                            "fullDescription": {
                                "text": "Declare a copy assignment operator for classes with dynamically allocated memory [MRM-37]"
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "help": {
                                "text": "Declare a copy assignment operator for classes with dynamically allocated memory [MRM-37]"
                            },
                            "properties": {
                                "tags": [
                                    "Memory and Resource Management"
                                ]
                            }
                        },
                        {
                            "id": "MRM-38",
                            "name": "Declare a copy constructor for classes with dynamically allocated memory",
                            "shortDescription": {
                                "text": "Declare a copy constructor for classes with dynamically allocated memory"
                            },
                            "fullDescription": {
                                "text": "Declare a copy constructor for classes with dynamically allocated memory [MRM-38]"
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "help": {
                                "text": "Declare a copy constructor for classes with dynamically allocated memory [MRM-38]"
                            },
                            "properties": {
                                "tags": [
                                    "Memory and Resource Management"
                                ]
                            }
                        },
                        {
                            "id": "MRM-35",
                            "name": "Never provide brackets ([]) for delete when deallocating non-arrays",
                            "shortDescription": {
                                "text": "Never provide brackets ([]) for delete when deallocating non-arrays"
                            },
                            "fullDescription": {
                                "text": "Never provide brackets ([]) for delete when deallocating non-arrays [MRM-35]"
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "help": {
                                "text": "Never provide brackets ([]) for delete when deallocating non-arrays [MRM-35]"
                            },
                            "properties": {
                                "tags": [
                                    "Memory and Resource Management"
                                ]
                            }
                        },
                        {
                            "id": "MRM-36",
                            "name": "Always provide empty brackets ([]) for delete when deallocating arrays",
                            "shortDescription": {
                                "text": "Always provide empty brackets ([]) for delete when deallocating arrays"
                            },
                            "fullDescription": {
                                "text": "Always provide empty brackets ([]) for delete when deallocating arrays [MRM-36]"
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "help": {
                                "text": "Always provide empty brackets ([]) for delete when deallocating arrays [MRM-36]"
                            },
                            "properties": {
                                "tags": [
                                    "Memory and Resource Management"
                                ]
                            }
                        },
                        {
                            "id": "MRM-51",
                            "name": "Do not use 'delete' on pointers to a void type",
                            "shortDescription": {
                                "text": "Do not use 'delete' on pointers to a void type"
                            },
                            "fullDescription": {
                                "text": "Do not use 'delete' on pointers to a void type [MRM-51]"
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "help": {
                                "text": "Do not use 'delete' on pointers to a void type [MRM-51]"
                            },
                            "properties": {
                                "tags": [
                                    "Memory and Resource Management"
                                ]
                            }
                        },
                        {
                            "id": "OOP-03",
                            "name": "Class cannot inherit other class more than once unless it is virtual inheritance",
                            "shortDescription": {
                                "text": "Class cannot inherit other class more than once unless it is virtual inheritance"
                            },
                            "fullDescription": {
                                "text": "Class cannot inherit other class more than once unless it is virtual inheritance [OOP-03]"
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "help": {
                                "text": "Class cannot inherit other class more than once unless it is virtual inheritance [OOP-03]"
                            },
                            "properties": {
                                "tags": [
                                    "Object Oriented"
                                ]
                            }
                        },
                        {
                            "id": "OOP-16",
                            "name": "Avoid calling virtual functions from constructors",
                            "shortDescription": {
                                "text": "Avoid calling virtual functions from constructors"
                            },
                            "fullDescription": {
                                "text": "Avoid calling virtual functions from constructors [OOP-16]"
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "help": {
                                "text": "Avoid calling virtual functions from constructors [OOP-16]"
                            },
                            "properties": {
                                "tags": [
                                    "Object Oriented"
                                ]
                            }
                        },
                        {
                            "id": "OOP-23",
                            "name": "If a class has virtual functions it shall have a virtual destructor",
                            "shortDescription": {
                                "text": "If a class has virtual functions it shall have a virtual destructor"
                            },
                            "fullDescription": {
                                "text": "If a class has virtual functions it shall have a virtual destructor [OOP-23]"
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "help": {
                                "text": "If a class has virtual functions it shall have a virtual destructor [OOP-23]"
                            },
                            "properties": {
                                "tags": [
                                    "Object Oriented"
                                ]
                            }
                        },
                        {
                            "id": "OPT-14",
                            "name": "Pass objects by reference instead of by value",
                            "shortDescription": {
                                "text": "Pass objects by reference instead of by value"
                            },
                            "fullDescription": {
                                "text": "Pass objects by reference instead of by value [OPT-14]"
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "help": {
                                "text": "Pass objects by reference instead of by value [OPT-14]"
                            },
                            "properties": {
                                "tags": [
                                    "Optimization"
                                ]
                            }
                        },
                        {
                            "id": "PB-13",
                            "name": "Do not call delete on non-pointers",
                            "shortDescription": {
                                "text": "Do not call delete on non-pointers"
                            },
                            "fullDescription": {
                                "text": "Do not call delete on non-pointers [PB-13]"
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "help": {
                                "text": "Do not call delete on non-pointers [PB-13]"
                            },
                            "properties": {
                                "tags": [
                                    "Possible Bugs"
                                ]
                            }
                        },
                        {
                            "id": "PB-21",
                            "name": "Properly terminate character strings",
                            "shortDescription": {
                                "text": "Properly terminate character strings"
                            },
                            "fullDescription": {
                                "text": "Properly terminate character strings [PB-21]"
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "help": {
                                "text": "Properly terminate character strings [PB-21]"
                            },
                            "properties": {
                                "tags": [
                                    "Possible Bugs"
                                ]
                            }
                        },
                        {
                            "id": "PB-54",
                            "name": "Do not cast from or to incomplete class at the point of casting",
                            "shortDescription": {
                                "text": "Do not cast from or to incomplete class at the point of casting"
                            },
                            "fullDescription": {
                                "text": "Do not cast from or to incomplete class at the point of casting [PB-54]"
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "help": {
                                "text": "Do not cast from or to incomplete class at the point of casting [PB-54]"
                            },
                            "properties": {
                                "tags": [
                                    "Possible Bugs"
                                ]
                            }
                        },
                        {
                            "id": "PB-55",
                            "name": "Do not delete objects with incomplete class at the point of deletion",
                            "shortDescription": {
                                "text": "Do not delete objects with incomplete class at the point of deletion"
                            },
                            "fullDescription": {
                                "text": "Do not delete objects with incomplete class at the point of deletion [PB-55]"
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "help": {
                                "text": "Do not delete objects with incomplete class at the point of deletion [PB-55]"
                            },
                            "properties": {
                                "tags": [
                                    "Possible Bugs"
                                ]
                            }
                        },
                        {
                            "id": "PB-68",
                            "name": "Boolean condition always evaluates to the same value due to enumeration with only zero or only non-zero constants",
                            "shortDescription": {
                                "text": "Boolean condition always evaluates to the same value due to enumeration with only zero or only non-zero constants"
                            },
                            "fullDescription": {
                                "text": "Boolean condition always evaluates to the same value due to enumeration with only zero or only non-zero constants [PB-68]"
                            },
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "help": {
                                "text": "Boolean condition always evaluates to the same value due to enumeration with only zero or only non-zero constants [PB-68]"
                            },
                            "properties": {
                                "tags": [
                                    "Possible Bugs"
                                ]
                            }
                        },
                        {
                            "id": "PB-60",
                            "name": "Suspicious argument to malloc",
                            "shortDescription": {
                                "text": "Suspicious argument to malloc"
                            },
                            "fullDescription": {
                                "text": "Suspicious argument to malloc [PB-60]"
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "help": {
                                "text": "Suspicious argument to malloc [PB-60]"
                            },
                            "properties": {
                                "tags": [
                                    "Possible Bugs"
                                ]
                            }
                        },
                        {
                            "id": "PB-61",
                            "name": "Pointer arithmetic performed on freshly allocated memory",
                            "shortDescription": {
                                "text": "Pointer arithmetic performed on freshly allocated memory"
                            },
                            "fullDescription": {
                                "text": "Pointer arithmetic performed on freshly allocated memory [PB-61]"
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "help": {
                                "text": "Pointer arithmetic performed on freshly allocated memory [PB-61]"
                            },
                            "properties": {
                                "tags": [
                                    "Possible Bugs"
                                ]
                            }
                        }
                    ]
                }
            },
            "results": [
                {
                    "ruleId": "BD-PB-ZERO",
                    "level": "error",
                    "message": {
                        "text": "Division by \"shape2.getArea()\" which may possibly be zero",
                        "markdown": "**\\[Line 5\\] Division by \"shape2\\.getArea\\(\\)\" which may possibly be zero**  \n  \n**Start of the path**  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;shape2\\->getArea\\(\\)  \n        Shapes.hpp&nbsp;(19)&nbsp;:&nbsp;double getArea\\(\\) const \\{ return 0; \\}  \n**Point of division by zero**&nbsp;  \nDivisionByZero.cpp&nbsp;(5)&nbsp;:&nbsp;return shape1\\->getArea\\(\\)/shape2\\->getArea\\(\\);"
                    },
                    "partialFingerprints": {
                        "violType": "FlowViol",
                        "unbViolId": "664d86ee-090e-5cca-b4ec-3b26c8989b51"
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "/FlowAnalysisCpp/FlowAnalysisCpp/DivisionByZero.cpp"
                                },
                                "region": {
                                    "startLine": 5,
                                    "startColumn": 1
                                }
                            }
                        }
                    ],
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": []
                                }
                            ]
                        }
                    ],
                    "baselineState": "unchanged"
                },
                {
                    "ruleId": "BD-RES-LEAKS",
                    "level": "error",
                    "message": {
                        "text": "Memory not deallocated: data",
                        "markdown": "**\\[Line 15\\] Memory not deallocated: data**  \n  \nMemoryLeak.cpp&nbsp;(7)&nbsp;:&nbsp;fscanf\\(file, \"%d\", pSize\\);  \n**Point where memory is allocated**  \nMemoryLeak.cpp&nbsp;(8)&nbsp;:&nbsp;int\\* data = new int\\[\\*pSize\\];&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_  \nMemoryLeak.cpp&nbsp;(9)&nbsp;:&nbsp;for \\(int i = 0; i < \\*pSize; i\\+\\+\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Loop condition evaluation: \\(i < \\*pSize\\) \\(assuming true\\)_&nbsp;&nbsp;_\\*\\*\\*&nbsp;Entering the loop_  \nMemoryLeak.cpp&nbsp;(10)&nbsp;:&nbsp;if \\(fscanf\\(file, \"%d\", &data\\[i\\]\\) == EOF\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(fscanf\\(\\.\\.\\.\\) == \\-1\\) \\(assuming true\\)_  \nMemoryLeak.cpp&nbsp;(11)&nbsp;:&nbsp;throw IOException\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Throws an exception_  \n**Point where allocated memory is lost**&nbsp;  \nMemoryLeak.cpp&nbsp;(15)&nbsp;:&nbsp;\\} // parasoft\\-suppress BD\\-RES\\-LEAKS \"source\\-code1\"&nbsp;&nbsp;_\\*\\*\\*&nbsp;Allocated memory: data_"
                    },
                    "partialFingerprints": {
                        "violType": "FlowViol",
                        "unbViolId": "55b9426c-f269-5e93-80fe-5e0450f0822f"
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "/FlowAnalysisCpp/FlowAnalysisCpp/MemoryLeak.cpp"
                                },
                                "region": {
                                    "startLine": 15,
                                    "startColumn": 1
                                }
                            }
                        }
                    ],
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": []
                                }
                            ]
                        }
                    ],
                    "suppressions": [
                        {
                            "kind": "external"
                        }
                    ],
                    "baselineState": "unchanged"
                },
                {
                    "ruleId": "BD-PB-NP",
                    "level": "error",
                    "message": {
                        "text": "\"point\" may possibly be null",
                        "markdown": "**\\[Line 11\\] \"point\" may possibly be null**  \n  \n**Source of null value**  \nNullPointer.cpp&nbsp;(7)&nbsp;:&nbsp;Point\\* point = 0;&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_  \nNullPointer.cpp&nbsp;(8)&nbsp;:&nbsp;if \\(argc > 3\\) \\{&nbsp;&nbsp;_\\*\\*\\*&nbsp;Condition evaluation: \\(argc > 3\\) \\(assuming false\\)_  \n**Null pointer dereferencing point**&nbsp;  \nNullPointer.cpp&nbsp;(11)&nbsp;:&nbsp;point\\->reflectAcrossX\\(\\);&nbsp;&nbsp;_\\*\\*\\*&nbsp;Null value carrier: point_"
                    },
                    "partialFingerprints": {
                        "violType": "FlowViol",
                        "unbViolId": "992bda3a-5745-5403-a54f-0450be9d8699"
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "/FlowAnalysisCpp/FlowAnalysisCpp/NullPointer.cpp"
                                },
                                "region": {
                                    "startLine": 11,
                                    "startColumn": 1
                                }
                            }
                        }
                    ],
                    "codeFlows": [
                        {
                            "threadFlows": [
                                {
                                    "locations": []
                                }
                            ]
                        }
                    ],
                    "baselineState": "unchanged"
                },
                {
                    "ruleId": "OOP-23",
                    "level": "error",
                    "message": {
                        "text": "Class 'Shape' has virtual functions without a virtual destructor",
                        "markdown": "**\\[Line 6\\] Class 'Shape' has virtual functions without a virtual destructor**"
                    },
                    "partialFingerprints": {
                        "violType": "StdViol",
                        "unbViolId": "a0d8e2d7-cb58-52cf-b968-cd6f005de4ba"
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "/FlowAnalysisCpp/FlowAnalysisCpp/Shapes.hpp"
                                },
                                "region": {
                                    "startLine": 6,
                                    "startColumn": 7,
                                    "endColumn": 8
                                }
                            }
                        }
                    ],
                    "baselineState": "unchanged"
                },
                {
                    "ruleId": "CODSTA-CPP-04",
                    "level": "error",
                    "message": {
                        "text": "Constructor 'Shape' allowing conversion should be made explicit",
                        "markdown": "**\\[Line 12\\] Constructor 'Shape' allowing conversion should be made explicit**"
                    },
                    "partialFingerprints": {
                        "violType": "StdViol",
                        "unbViolId": "54b182e4-c408-5cca-9ad6-bb0bdc7bc7e3"
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "/FlowAnalysisCpp/FlowAnalysisCpp/Shapes.hpp"
                                },
                                "region": {
                                    "startLine": 12,
                                    "startColumn": 5,
                                    "endColumn": 6
                                }
                            }
                        }
                    ],
                    "baselineState": "unchanged"
                },
                {
                    "ruleId": "OPT-14",
                    "level": "warning",
                    "message": {
                        "text": "The parameter 'position' of function 'Shape' is passed by value",
                        "markdown": "**\\[Line 12\\] The parameter 'position' of function 'Shape' is passed by value**"
                    },
                    "partialFingerprints": {
                        "violType": "StdViol",
                        "unbViolId": "3ac773bd-afd2-5dc3-b9d7-7dcdb02c3df9"
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "/FlowAnalysisCpp/FlowAnalysisCpp/Shapes.hpp"
                                },
                                "region": {
                                    "startLine": 12,
                                    "startColumn": 17,
                                    "endColumn": 18
                                }
                            }
                        }
                    ],
                    "baselineState": "unchanged"
                },
                {
                    "ruleId": "OOP-23",
                    "level": "error",
                    "message": {
                        "text": "Class 'LineSegment' has virtual functions without a virtual destructor",
                        "markdown": "**\\[Line 15\\] Class 'LineSegment' has virtual functions without a virtual destructor**"
                    },
                    "partialFingerprints": {
                        "violType": "StdViol",
                        "unbViolId": "a3253ed4-b6e4-5be1-950e-72076618703a"
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "/FlowAnalysisCpp/FlowAnalysisCpp/Shapes.hpp"
                                },
                                "region": {
                                    "startLine": 15,
                                    "startColumn": 7,
                                    "endColumn": 8
                                }
                            }
                        }
                    ],
                    "baselineState": "unchanged"
                },
                {
                    "ruleId": "OPT-14",
                    "level": "warning",
                    "message": {
                        "text": "The parameter 'end' of function 'LineSegment' is passed by value",
                        "markdown": "**\\[Line 18\\] The parameter 'end' of function 'LineSegment' is passed by value**"
                    },
                    "partialFingerprints": {
                        "violType": "StdViol",
                        "unbViolId": "c7d7f65d-132a-51b0-888c-4eb14ee73ac3"
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "/FlowAnalysisCpp/FlowAnalysisCpp/Shapes.hpp"
                                },
                                "region": {
                                    "startLine": 18,
                                    "startColumn": 39,
                                    "endColumn": 40
                                }
                            }
                        }
                    ],
                    "baselineState": "unchanged"
                },
                {
                    "ruleId": "OPT-14",
                    "level": "warning",
                    "message": {
                        "text": "The parameter 'position' of function 'LineSegment' is passed by value",
                        "markdown": "**\\[Line 18\\] The parameter 'position' of function 'LineSegment' is passed by value**"
                    },
                    "partialFingerprints": {
                        "violType": "StdViol",
                        "unbViolId": "d4dbdfb9-2595-5dc4-81b8-d7f08c0ef54f"
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "/FlowAnalysisCpp/FlowAnalysisCpp/Shapes.hpp"
                                },
                                "region": {
                                    "startLine": 18,
                                    "startColumn": 23,
                                    "endColumn": 24
                                }
                            }
                        }
                    ],
                    "baselineState": "unchanged"
                },
                {
                    "ruleId": "OOP-23",
                    "level": "error",
                    "message": {
                        "text": "Class 'Circle' has virtual functions without a virtual destructor",
                        "markdown": "**\\[Line 22\\] Class 'Circle' has virtual functions without a virtual destructor**"
                    },
                    "partialFingerprints": {
                        "violType": "StdViol",
                        "unbViolId": "4c5efa6d-4f35-579e-a9bf-1d42a730c92b"
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "/FlowAnalysisCpp/FlowAnalysisCpp/Shapes.hpp"
                                },
                                "region": {
                                    "startLine": 22,
                                    "startColumn": 7,
                                    "endColumn": 8
                                }
                            }
                        }
                    ],
                    "baselineState": "unchanged"
                },
                {
                    "ruleId": "OPT-14",
                    "level": "warning",
                    "message": {
                        "text": "The parameter 'position' of function 'Circle' is passed by value",
                        "markdown": "**\\[Line 25\\] The parameter 'position' of function 'Circle' is passed by value**"
                    },
                    "partialFingerprints": {
                        "violType": "StdViol",
                        "unbViolId": "92d41795-7040-5e8d-b86a-75a7b322fc4d"
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "/FlowAnalysisCpp/FlowAnalysisCpp/Shapes.hpp"
                                },
                                "region": {
                                    "startLine": 25,
                                    "startColumn": 18,
                                    "endColumn": 19
                                }
                            }
                        }
                    ],
                    "baselineState": "unchanged"
                },
                {
                    "ruleId": "OPT-14",
                    "level": "warning",
                    "message": {
                        "text": "The parameter 'point' of function 'contains' is passed by value",
                        "markdown": "**\\[Line 27\\] The parameter 'point' of function 'contains' is passed by value**"
                    },
                    "partialFingerprints": {
                        "violType": "StdViol",
                        "unbViolId": "ed12a486-8599-5f80-8447-e094d79bccd4"
                    },
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "/FlowAnalysisCpp/FlowAnalysisCpp/Shapes.hpp"
                                },
                                "region": {
                                    "startLine": 27,
                                    "startColumn": 24,
                                    "endColumn": 25
                                }
                            }
                        }
                    ],
                    "baselineState": "unchanged"
                }
            ]
        }
    ]
}